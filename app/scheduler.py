import os
from datetime import datetime

from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.storage import unpaid, list_members

load_dotenv(".env")
PRICE        = os.getenv("PRICE", "0")
PAYMENT_INFO = os.getenv("PAYMENT_INFO", "‚Äî")

REMINDER_KB = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="–û–ø–ª–∞—á–µ–Ω–æ ‚úÖ", callback_data="paid")]]
)

def build_reminder_text() -> str:
    return (
        "üëã <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ VPN</b>\n"
        f"–°—É–º–º–∞: <b>{PRICE} ‚ÇΩ</b>\n"
        f"–ü–µ—Ä–µ–≤–µ—Å—Ç–∏: <b>{PAYMENT_INFO}</b>\n\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Üì"
    )

def build_welcome_text() -> str:
    return (
        "üëã <b>–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –Ω–∞—à–µ–º—É VPN-—Å–µ—Ä–≤–µ—Ä—É</b>\n\n"
        "‚Ä¢ –û–ø–ª–∞—Ç–∞ <b>–∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü 23-–≥–æ —á–∏—Å–ª–∞</b>\n"
        f"‚Ä¢ –°—É–º–º–∞: <b>{PRICE} ‚ÇΩ</b>\n"
        f"‚Ä¢ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏: <b>{PAYMENT_INFO}</b>\n\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–û–ø–ª–∞—á–µ–Ω–æ ‚úÖ¬ª</b> –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏."
    )

async def remind_members(bot: Bot, admin_id: int):
    month = datetime.now().strftime("%Y-%m")
    for uid in unpaid(month, admin_id):
        await bot.send_message(uid, build_reminder_text(), reply_markup=REMINDER_KB)

async def admin_summary(bot: Bot, admin_id: int):
    month    = datetime.now().strftime("%Y-%m")
    debtors  = unpaid(month, admin_id)
    members  = list_members(admin_id)
    paid_cnt = len(members) - len(debtors)

    bar = "‚ñì" * paid_cnt + "‚ñë" * len(debtors)
    rows = [[InlineKeyboardButton(
                text=f"–ü–Ω—É—Ç—å üöÄ {members[str(uid)]['name']}",
                callback_data=f"ping:{uid}")
            ] for uid in debtors]

    kb = InlineKeyboardMarkup(inline_keyboard=rows) if rows else None

    await bot.send_message(
        admin_id,
        f"<b>–û—Ç—á—ë—Ç –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞ {month}</b>\n"
        f"{bar}  {paid_cnt}/{len(members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–ø–ª–∞—Ç–∏–ª–∏.",
        reply_markup=kb
    )

def setup_scheduler(bot: Bot, billing_day: int, admin_id: int):
    sched = AsyncIOScheduler(timezone="Europe/Moscow")
    sched.add_job(remind_members, "cron",
                  day=billing_day, hour=12, minute=0,
                  args=[bot, admin_id], id="members_reminder")
    sched.add_job(admin_summary, "cron",
                  day=billing_day, hour=21, minute=0,
                  args=[bot, admin_id], id="admin_report")
    sched.start()
